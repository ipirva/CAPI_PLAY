### Create the environment
# kustomize and clusterctl binaries -> /usr/local/bin/
# aws cli binary -> /Users/ipirva/Library/Python/3.7/bin/
export PATH=$PATH:/Users/ipirva/Library/Python/3.7/bin/:/usr/local/bin/
export LC_ALL="en_US.UTF-8"
# AWS root user programmatic access key - needed by clusterawsadm at the beginning for the CFS creation
# for the worker nodes lifecycle, the user AWS_BOOTSTRAP_USER will be used - its credentials will overwrite the root ones in the env variables
export AWS_REGION=eu-west-2
export AWS_ACCESS_KEY_ID=xxx
export AWS_SECRET_ACCESS_KEY=xxx
# AWS desired EC2 SSH KEY name - if it does not exist, it will be created
export AWS_SSH_KEY_NAME=mycluster-ssh
# on AWS create SSH Key ${AWS_SSH_KEY_NAME} if it does not exist already
mkdir -p ${PWD}/keys
SSH_KEY_FOUND=$(aws --profile=vmw ec2 describe-key-pairs --key-names ${AWS_SSH_KEY_NAME} | jq '. | length'); SSH_KEY_FOUND=${SSH_KEY_FOUND:=0}
if [ $SSH_KEY_FOUND -eq 0 ]; then
    echo -e 'y\n' | ssh-keygen -q -t rsa -b 4096 -C "CAPA SSH KEY" -f ${PWD}/keys/${AWS_SSH_KEY_NAME} -N "" && \
    aws --profile=vmw ec2 import-key-pair --key-name mycluster-ssh --public-key-material file://${PWD}/keys/${AWS_SSH_KEY_NAME}.pub
fi
# clusterawsadm run CloudFormation Stack to bootstrap AWS environment
AWS_STACK_EXISTS=$(aws --profile=vmw cloudformation describe-stacks --stack-name "${AWS_CLOUDFORMATION_STACK}" | jq '.Stacks[0].StackStatus=="CREATE_COMPLETE"')
AWS_STACK_EXISTS=${AWS_STACK_EXISTS:="false"}
if [[ ${AWS_STACK_EXISTS} = "false" ]]; then
	clusterawsadm alpha bootstrap create-stack
else 
    echo "AWS CloudFormation stack ${AWS_CLOUDFORMATION_STACK} has already been created."
fi
# clusterawsadm CloudFormation Stack name and the user previously created just above
export AWS_CLOUDFORMATION_STACK=cluster-api-provider-aws-sigs-k8s-io
export AWS_BOOTSTRAP_USER=bootstrapper.cluster-api-provider-aws.sigs.k8s.io
# KUBECONFIG PATHs
export KUBECONFIG=$(cat ${PWD}/kubeconfig-path)
# kind cluster and clusterctl used CAP* versions
export KIND_CLUSTER_NAME=test
# https://github.com/kubernetes-sigs/cluster-api/releases
export CAPI_VERSION=v0.3.3
# https://github.com/kubernetes-sigs/cluster-api-provider-aws/releases/
export CAPA_VERSION=v0.5.2
# delete any programmatic AWS access keys for ${AWS_BOOTSTRAP_USER}
for key in $(aws --profile=vmw iam list-access-keys --user-name ${AWS_BOOTSTRAP_USER} | jq -r '.["AccessKeyMetadata"][]."AccessKeyId"'); do aws --profile=vmw iam delete-access-key --user-name ${AWS_BOOTSTRAP_USER} --access-key-id ${key}; done
# create new programmatic AWS access key for ${AWS_BOOTSTRAP_USER}
# store the key in env variables - it overwrites the root ones
export AWS_CREDENTIALS=$(aws --profile=vmw iam create-access-key --user-name ${AWS_BOOTSTRAP_USER})
export AWS_ACCESS_KEY_ID=$(echo ${AWS_CREDENTIALS} | jq .AccessKey.AccessKeyId -r)
export AWS_SECRET_ACCESS_KEY=$(echo ${AWS_CREDENTIALS} | jq .AccessKey.SecretAccessKey -r)
export AWS_B64ENCODED_CREDENTIALS=$(clusterawsadm alpha bootstrap encode-aws-credentials)